- if signed_in?
  .row
    .col-xs-12{style: "padding-top:10px;color:#fff"}
      %p.text-left.pull-left
        = link_to 'Logout', destroy_user_session_path, :method =>'delete', title: "Logout"
      %p.text-right.pull-right
        %a{href: new_activity_path, title: "Add an activity"}
          %span.glyphicon.glyphicon-plus-sign{style: "font-size:1.4em;"}
        %a{href: settings_path, title: "Change your settings"}
          %span.glyphicon.glyphicon-cog{style: "font-size:1.4em;"}
        = link_to reset_activities_path, title: "Reset your activities", data: {confirm: "Are you sure you want to reset all of your activities for today?", "no-turbolink" => nil} do
          %span.glyphicon.glyphicon-refresh{style: "font-size:1.4em;"}
  - if @activities.present?
    .row
      %table.table
        - @activities.each do |a|
          %tr{:class => ("active" if a.active?(current_user)), id: a.id}
            %td{id: "row#{a.id}"}
              = link_to (a.active?(current_user) ? stop_activity_path(a) : start_activity_path(a)), remote: true, :"data-start-path" => start_activity_path(a), :"data-stop-path" => stop_activity_path(a) do
                %h2
                  #{a.name}
                  %span.pull-right.duration{id: "clock#{a.id}", :"data-total-time" => current_user.daily_activity_duration(a)} #{current_user.daily_activity_duration(a)}
    :javascript
      $(function() {
        return $("a[data-remote]").on("ajax:success", function(e, data, status, xhr) {
          if(!data.stop){
            $(this).parents('tr').
                    siblings().
                    removeClass("active").
                    map(function(){
                      var a = $(this).find('a');
                      a.attr('href', a.data('start-path') + '?duration=' + a.find('span.duration').data('total-time'));
                      window[$(this).find('span.duration').attr('id')].stopClock();
                    });
            window[$(this).find('span.duration').attr('id')].startClock();
          }
          else{
            window[$(this).find('span.duration').attr('id')].stopClock();
          }
          $(this).parents('tr').toggleClass("active");
          $(this).attr('href', data.path + '?duration=' + $(this).find('span.duration').data('total-time'));
        }).on("ajax:error", function(e, data, status, xhr){
          console.log(data);
          return alert("Something went wrong!");
        });
      });

      function Clock(element, active) {
        this.element = element;
        this.minutes = 0;
        this.seconds = 0;
        this.totalTime = 0;
        this.hours = 0;
        this.active = active;
      }

      Clock.prototype = {
        startClock: function() {
          this.active = true;
          this.setTimeFromSeconds(this.totalTime);
          this.element.text(this.formattedTime());
          this.element.data('total-time', this.totalTime);
          this.totalTime++;
          var that = this;
          this.counter = setTimeout(function(){that.startClock()},1000);
        },
        setTimeFromSeconds: function(totalTime){
          this.seconds = totalTime%60
          this.minutes = Math.floor((totalTime/60)%60)
          this.hours = Math.floor(totalTime/3600)
        },
        formattedTime: function(){
          if (this.hours > 0){
            return this.hours + ":" + this.checkDigits(this.minutes) + ":" + this.checkDigits(this.seconds);
          }
          else{
            return this.minutes + ":" + this.checkDigits(this.seconds);
          }
        },
        checkDigits: function(i) {
          if (i<10) {
             i="0" + i;
          }
          return i;
        },
        stopClock: function() {
          this.active = false;
          this.element.text(this.formattedTime());
          clearTimeout(this.counter);
        },
        resetClock: function() {
          this.element.text("0:00");
          this.minutes = 0;
          this.active = false;
          this.hours = 0;
          this.seconds = 0;
          this.totalTime = 0;
          this.counter = null;
        }
      }

      function initClock(element, active) {
        if(typeof element == 'undefined'){
          return false;
        }
        ele = element.attr('id');
        window[ele] = new Clock(element, active);
        window[ele].totalTime = parseInt(element.text(), 10);
        window[ele].setTimeFromSeconds(window[ele].totalTime);
        if(active){
          window[ele].startClock();
        }
        else{
          window[ele].stopClock();
        }
      }
      window.onload = function() {
        $('span.duration').map(function(){
          initClock($(this), $(this).parents('tr').hasClass('active'));
        });
      }

      // requestAnimationFrame and cancel polyfill
      (function() {
        var lastTime = 0;
        var vendors = ['ms', 'moz', 'webkit', 'o'];
        for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
          window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
          window.cancelAnimationFrame =
                  window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
        }

        if (!window.requestAnimationFrame)
            window.requestAnimationFrame = function(callback, element) {
              var currTime = new Date().getTime();
              var timeToCall = Math.max(0, 16 - (currTime - lastTime));
              var id = window.setTimeout(function() { callback(currTime + timeToCall); },
                      timeToCall);
              lastTime = currTime + timeToCall;
              return id;
            };

        if (!window.cancelAnimationFrame)
          window.cancelAnimationFrame = function(id) {
              clearTimeout(id);
          };
      }());

      var HorizontalSwipe = (function() {
              function Main(container, slidingrow, handler) {
                  var self = this;

                  this.breakpoint = 80;

                  this.container = container;
                  this.slidingrow = slidingrow;
                  this.handler = handler;

                  this._slidedown_height = 0;
                  this._anim = null;
                  this._dragged_left = false;
                  this._dragged_right = false;

                  this.hammertime = Hammer(this.slidingrow)
                      .on("touch tap drag swipe release", function(ev) {
                          self.handleHammer(ev);
                      });
              };


              /**
               * Handle HammerJS callback
               * @param ev
               */
              Main.prototype.handleHammer = function(ev) {
                  var self = this;

                  switch(ev.type) {
                      // reset element on start
                      case 'touch':
                        console.log('touch event');
                        break;

                      case 'drag':
                        console.log('drag event');
                        break;

                      // use tap event to stop and start clock
                      case 'tap':
                        console.log('tap event');
                        break;

                      // on release we check how far we dragged
                      case 'swipe':
                          console.log(ev.gesture.deltaX);
                          break;

                      case 'release':
                          if(!this._dragged_down) {
                              return;
                          }

                          // cancel animation
                          cancelAnimationFrame(this._anim);

                          // over the breakpoint, trigger the callback
                          if(ev.gesture.deltaX >= this.breakpoint) {
                            alert('swiped past breakpoint');
                            //  container_el.className = 'pullrefresh-loading';
                            //  pullrefresh_icon_el.className = 'icon loading';

                            //  this.setHeight(60);
                            //  this.handler.call(this);
                          }
                          // just hide it
                          else {
                              row_el.className = 'slideup';
                              container_el.className = 'pullrefresh-slideup';

                              this.hide();
                          }
                          break;

                      // when we dragdown
                      case 'dragdown':
                          this._dragged_down = true;

                          // if we are not at the top move down
                          var scrollY = window.scrollY;
                          if(scrollY > 5) {
                              return;
                          } else if(scrollY !== 0) {
                              window.scrollTo(0,0);
                          }

                          // no requestAnimationFrame instance is running, start one
                          if(!this._anim) {
                              this.updateHeight();
                          }

                          // stop browser scrolling
                          ev.gesture.preventDefault();

                          // update slidedown height
                          // it will be updated when requestAnimationFrame is called
                          this._slidedown_height = ev.gesture.deltaY * 0.4;
                          break;
                  }
              };


              /**
               * when we set the height, we just change the container y
               * @param   {Number}    height
               */
              Main.prototype.setHeight = function(height) {
                  if(Modernizr.csstransforms3d) {
                      this.container.style.transform = 'translate3d(0,'+height+'px,0) ';
                      this.container.style.oTransform = 'translate3d(0,'+height+'px,0)';
                      this.container.style.msTransform = 'translate3d(0,'+height+'px,0)';
                      this.container.style.mozTransform = 'translate3d(0,'+height+'px,0)';
                      this.container.style.webkitTransform = 'translate3d(0,'+height+'px,0) scale3d(1,1,1)';
                  }
                  else if(Modernizr.csstransforms) {
                      this.container.style.transform = 'translate(0,'+height+'px) ';
                      this.container.style.oTransform = 'translate(0,'+height+'px)';
                      this.container.style.msTransform = 'translate(0,'+height+'px)';
                      this.container.style.mozTransform = 'translate(0,'+height+'px)';
                      this.container.style.webkitTransform = 'translate(0,'+height+'px)';
                  }
                  else {
                      this.container.style.top = height+"px";
                  }
              };


              /**
               * hide the pullrefresh message and reset the vars
               */
              Main.prototype.hide = function() {
                  container_el.className = '';
                  this._slidedown_height = 0;
                  this.setHeight(0);
                  cancelAnimationFrame(this._anim);
                  this._anim = null;
                  this._dragged_down = false;
              };


              /**
               * hide the pullrefresh message and reset the vars
               */
              Main.prototype.slideUp = function() {
                  var self = this;
                  cancelAnimationFrame(this._anim);

                  row_el.className = 'slideup';
                  container_el.className = 'pullrefresh-slideup';

                  this.setHeight(0);

                  setTimeout(function() {
                      self.hide();
                  }, 500);
              };


              /**
               * update the height of the slidedown message
               */
              Main.prototype.updateHeight = function() {
                  var self = this;

                  this.setHeight(this._slidedown_height);

                  if(this._slidedown_height >= this.breakpoint){
                      this.slidebox.className = 'breakpoint';
                      this.slidebox_icon.className = 'icon arrow arrow-up';
                  }
                  else {
                      this.slidebox.className = '';
                      this.slidebox_icon.className = 'icon arrow';
                  }

                  this._anim = requestAnimationFrame(function() {
                      self.updateHeight();
                  });
              };

              return Main;
          })();

          function getEl(id) {
            return document.getElementById(id);
          }

          var container_el = getEl('11');
          var row_el = getEl('row11');
          var refresh = new HorizontalSwipe(container_el, row_el);

          // update image onrefresh
          refresh.handler = function() {
              console.log("handler called");
              var self = this;
              // a small timeout to demo the loading state
              setTimeout(function() {
                  var preload = new Image();
                  preload.onload = function() {
                      image_el.src = this.src;
                      self.slideUp();
                  };
                  preload.src = 'http://lorempixel.com/800/600/?'+ (new Date().getTime());
              }, 1000);
          };

  - else
    .row
      .col-xs-12.text-center
        %h2 You have no activities!
        %a{href: new_activity_path}
          %button.btn.btn-primary.btn-lg.btn-block{:type => "button"} Create one now
- else
  .row
    .col-xs-12.text-center
      %h2 Timeblocks
      %a{href: new_user_session_path}
        %button.btn.btn-primary.btn-lg.btn-block{:type => "button"} Sign In
      %a{href: new_user_registration_path}
        %button.btn.btn-default.btn-lg.btn-block{:type => "button"} Sign Up




